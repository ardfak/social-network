{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","console","log","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength100","maxLengthCreator","Textarea","Element","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uICG/MC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IAExCC,EAFuC,uKAKzC,OADAC,QAAQC,IAAIC,KAAKC,OACZD,KAAKC,MAAMR,OAET,kBAACG,EAAcI,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eALJ,GAEbC,IAAMP,WAatC,OAFqCQ,YAAQb,EAARa,CAAoCP,K,+FCP5DQ,EAVI,SAACJ,GACnB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACC,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAClC,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCAdC,EANC,SAACZ,GAChB,OAAO,yBAAKO,UAAWC,IAAEC,QACvBT,EAAMa,U,iCC6BHC,EAAeC,YAAiB,KAChCC,EAAWC,YAAQ,YAsBnBC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EApBL,SAACnB,GAGtB,OACE,0BAAMqB,SAAUrB,EAAMsB,cACpB,6BACE,kBAACC,EAAA,EAAD,CACEC,YAAY,qBACZC,UAAWT,EACXL,KAAK,iBACLe,SAAU,CAACC,IAAUb,MAGzB,6BACE,6CAUOc,EArDC,SAAC5B,GACf,IAAMT,EAAQS,EAAM6B,YAEhBC,EAAkBvC,EAAMwC,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAEzC6B,EAAmB5C,EAAM6C,SAASJ,KAAI,SAACK,GAAD,OACxC,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE/B,QAEjBf,EAAM+C,eAM3B,OACE,yBAAK/B,UAAWC,IAAEuB,SAChB,yBAAKxB,UAAWC,IAAE+B,cAAeT,GACjC,yBAAKvB,UAAWC,IAAE4B,UAChB,6BAAMD,IAER,kBAACjB,EAAD,CAAqBG,SAVL,SAACmB,GACnBxC,EAAMyC,YAAYD,EAAOF,qB,wBCCdI,sBACbvC,aAhBoB,SAACZ,GACrB,MAAO,CACLsC,YAAatC,EAAMsC,gBAGI,SAACc,GACxB,MAAO,CACHF,YAAa,SAACH,GACVK,EAASF,YAAYH,SAS/B5C,IAFagD,CAGbd","file":"static/js/4.b9aab91a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__34UcN\",\"dialogsItems\":\"Dialogs_dialogsItems__1fUE3\",\"active\":\"Dialogs_active__2kl00\",\"dialog\":\"Dialogs_dialog__OkxTx\",\"messages\":\"Dialogs_messages__eBTNZ\",\"message\":\"Dialogs_message__GpLwX\"};","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      console.log(this.props)\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n      return <Component {...this.props} />;\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n  return connectedAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\tlet path = '/dialogs/' + props.id;\r\n\r\n\treturn (\r\n\t\t<div className={s.dialog + ' ' + s.active}>\r\n\t\t\t<NavLink to={path}>{props.name}</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n\treturn <div className={s.dialog}>\r\n\t\t{props.message}\r\n\t</div>;\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\nimport { Element } from \"../../hoc/withFormsControls\";\r\n\r\nconst Dialogs = (props) => {\r\n  const state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\nconst Textarea = Element(\"textarea\");\r\n\r\nconst AddMessageForm = (props) => {\r\n  \r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder='Enter your message'\r\n          component={Textarea}\r\n          name='newMessageBody'\r\n          validate={[required, maxLength100]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMessageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { sendMessage } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessage(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}